output <- wordProb_df["orange", ] - wordProb_df["bitter", ] + wordProb_df["salad", ]
(synonym(output))
output <- wordProb_df["orange", ] - wordProb_df["peel", ] + wordProb_df["salad", ]
(synonym(output))
output <- wordProb_df["orange", ] - wordProb_df["peel", ] + wordProb_df["fish", ]
(synonym(output))
output <- wordProb_df["orange", ] - wordProb_df["zest", ] + wordProb_df["fish", ]
(synonym(output))
output <- wordProb_df["orange", ] - wordProb_df["zest", ] + wordProb_df["banana", ]
(synonym(output))
output <- wordProb_df["taro", ] - wordProb_df["zest", ] + wordProb_df["banana", ]
output <- wordProb_df["juice", ] - wordProb_df["zest", ] + wordProb_df["banana", ]
(synonym(output))
(synonym(wordProb_df["orange",]))
output <- wordProb_df["orange", ] - wordProb_df["grapefruit", ] + wordProb_df["banana", ]
(synonym(output))
output <- wordProb_df["orange", ] - wordProb_df["zest", ] + wordProb_df["banana", ]
(synonym(output))
(synonym(wordProb_df["orange",]))
# svd to 2 dimensions
tiny_svd <- svd(sparse_mat, 2, maxit = 500)
# svd to 2 dimensions
tiny_svd <- svd(sparse_mat, 2)
tinyword_df <- tiny_svd$u
# svd to 2 dimensions
twodim_svd <- svd(sparse_mat, 2)
rm(tiny_svd)
twodim_df <- tiny_svd$u
twodim_df <- twodim_svd$u
rownames(twodim_df) <- rownames(sparse_mat)
View(twodim_df)
View(twodim_df)
# svd to 2 dimensions
twodim_svd <- svd(sparse_mat, 2)
twodim_df <- twodim_svd$u
twodim_df <- twodim_svd$u
twodim_df$word <- rownames(sparse_mat)
View(twodim_df)
twodim_df <- twodim_svd$u
View(twodim_df)
class(twodim_df)
twodim_df <- as.data.frame(twodim_svd$u)
twodim_df$word <- rownames(sparse_mat)
rm(tinyword_df)
View(twodim_df)
library(ggplot2)
write.csv(twodim_df, file.path(xpath_nlp, "word2d_df.csv"))
?write.csv
write.csv(twodim_df, file.path(xpath_nlp, "word2d_df.csv"), row.names = FALSE)
library(ggplot2)
word2d_plot <- ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), col = "blue")
word2d_plot <- ggplot(twodim_df, aes(x = V1, y = V2, label = word))
word2d_plot <- ggplot(twodim_df, aes(x = V1, y = V2, label = word)) +
geom_text(aes(label = word), col = "blue")
View(twodim_df)
word2d_plot <- ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word))
word2d_plot <- ggplot(twodim_df, aes(x = V1, y = V2, label = word)) +
geom_text(aes(label = word), color = "blue")
ggplot(twodim_df, aes(x = V1, y = V2, label = word)) +
geom_text(aes(label = word), color = "blue")
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue")
View(ngrams)
View(ngrams)
ngrams <- corp_df %>% text_to_ngram(8) %>% mutate(ngramID = row_number()) %>%
tidyr::unite(skipgramID, recipeID, ngramID) %>% unnest_tokens(word, ngram) %>%
filter(word != "spin" | word != "dry")
View(ngrams)
ngrams %>% filter(word == "spin")
ngrams <- corp_df %>% text_to_ngram(8) %>% mutate(ngramID = row_number()) %>%
tidyr::unite(skipgramID, recipeID, ngramID) %>% unnest_tokens(word, ngram) %>%
filter(word != "spin" & word != "dry")
ngrams <- corp_df %>% text_to_ngram(8) %>% mutate(ngramID = row_number()) %>%
tidyr::unite(skipgramID, recipeID, ngramID) %>% unnest_tokens(word, ngram)
test <- ngrams %>% filter(word != "spin")
test %>% filter(word == "spin")
test <- ngrams %>% filter(word != "spin" & word != "dry")
test %>% filter(word == "spin")
test %>% filter(word == "dry")
test <- ngrams %>% filter(word != "spin" & word != "dry") %>% filter(word != "spin" & word != "dry")
ngrams <- corp_df %>% text_to_ngram(8) %>% mutate(ngramID = row_number()) %>%
tidyr::unite(skipgramID, recipeID, ngramID) %>% unnest_tokens(word, ngram) %>%
filter(word != "spin" & word != "dry")
unigram_prob <- corp_df %>% text_to_word() %>%
filter(word != "spin" & word != "dry") %>% count(word, sort = TRUE) %>%
mutate(p = n/sum(n))
View(unigram_prob)
ngram_prob <- ngrams %>% pairwise_count(word, skipgramID, diag = TRUE, sort = TRUE) %>%
mutate(p = n/sum(n))
ratio_prob <- ngram_prob %>% filter(n > 20) %>%
left_join(unigram_prob %>% select(item1 = word, p1 = p), by = "item1") %>%
left_join(unigram_prob %>% select(item2 = word, p2 = p), by = "item2") %>%
mutate(p_ratio = p/p1/p2) %>%
arrange(-p_ratio)
sparse_mat <- ratio_prob %>% mutate(pmi = log10(p_ratio)) %>%
cast_sparse(item1, item2, pmi)
# svd
sparse_mat@x[is.na(sparse_mat@x)] <- 0
sparse_svd <- svd(sparse_mat, 256)
wordProb_df <- sparse_svd$u
rownames(wordProb_df) <- rownames(sparse_mat)
# evaluate similar words by cosine similarity
synonym <- function(selectedWord_vec){
similarity <- wordProb_df %*% selectedWord_vec %>% data.frame(similarity = .) %>%
arrange(-similarity) %>% head(10)
}
(synonym(wordProb_df["orange",]))
output <- wordProb_df["orange", ] - wordProb_df["zest", ] + wordProb_df["banana", ]
(synonym(output))
# svd to 2 dimensions
twodim_svd <- svd(sparse_mat, 2)
twodim_df <- as.data.frame(twodim_svd$u)
twodim_df$word <- rownames(sparse_mat)
write.csv(twodim_df, file.path(xpath_nlp, "word2d_df.csv"), row.names = FALSE)
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue")
?geom_text
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 5)
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 1)
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 5)
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 3)
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue")
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue") +
coord_cartesian(xlim = c(-0.5, 0.5), ylim = c(-0.05, 0.05))
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue")
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue") +
coord_cartesian(xlim = c(-0.05, 0.05), ylim = c(-0.05, 0.05))
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue") +
coord_cartesian(xlim = c(-0.025, 0.025), ylim = c(-0.025, 0.025))
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 1) +
coord_cartesian(xlim = c(-0.025, 0.025), ylim = c(-0.025, 0.025))
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 2) +
coord_cartesian(xlim = c(-0.025, 0.025), ylim = c(-0.025, 0.025))
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 3) +
coord_cartesian(xlim = c(-0.025, 0.025), ylim = c(-0.025, 0.025))
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 3) +
coord_cartesian(xlim = c(-0.025, 0.025), ylim = c(-0.025, 0.025)) +
labs(title("2D SVD"))
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 3) +
coord_cartesian(xlim = c(-0.025, 0.025), ylim = c(-0.025, 0.025)) +
labs(title = "2D SVD")
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 3) +
coord_cartesian(xlim = c(-0.025, 0.025), ylim = c(-0.025, 0.025)) +
labs(title = "2D SVD", xlab("hello"))
ggplot(twodim_df) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue", size = 3) +
coord_cartesian(xlim = c(-0.025, 0.025), ylim = c(-0.025, 0.025)) +
labs(title = "2D SVD")
library(rjson)
library(dplyr)
xpath_main <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_nlp <- file.path(xpath_main, "analysis", "nlp", "_assets")
corp_df <- as_tibble(read.csv(file.path(xpath_nlp, "corp_df.csv"), header = TRUE, sep = ","))
library(tokenizers)
text_to_ngram <- function(df, num){
temp_df <- data.frame(recipeID = NULL, ngram = NULL)
for (i in 1:length(df$instructions)){
recipe <- df$recipeID[i]
instruct <- df$instructions[i]
ngrams <- unlist(tokenize_ngrams(instruct, n = num))
len <- length(ngrams)
temp_df <- rbind.data.frame(temp_df, data.frame(recipeID = rep(recipe, len), ngram = ngrams))
}
return(temp_df)
}
library(tidytext)
ngrams <- corp_df %>% text_to_ngram(8) %>% mutate(ngramID = row_number()) %>%
tidyr::unite(skipgramID, recipeID, ngramID) %>% unnest_tokens(word, ngram) %>%
filter(word != "spin" & word != "dry")
View(ngrams)
text_to_word <- function(df){
temp_df <- data.frame(recipeID = NULL, word = NULL)
for (i in 1:length(df$instructions)){
recipe <- df$recipeID[i]
instruct <- df$instructions[i]
words <- unlist(strsplit(instruct, " "))
len <- length(words)
temp_df <- rbind.data.frame(temp_df, data.frame(recipeID = rep(recipe, len), word = words))
}
return(temp_df)
}
unigram_prob <- corp_df %>% text_to_word() %>%
filter(word != "spin" & word != "dry") %>% count(word, sort = TRUE) %>%
mutate(p = n/sum(n))
View(unigram_prob)
unigram_prob <- corp_df %>% text_to_word()
View(unigram_prob)
unigram_prob <- corp_df %>% text_to_word() %>%
filter(word != "spin" & word != "dry")
View(unigram_prob)
unigram_prob <- corp_df %>% text_to_word() %>%
filter(word != "spin" & word != "dry") %>% count(word, sort = TRUE)
View(unigram_prob)
unigram_prob <- corp_df %>% text_to_word() %>%
filter(word != "spin" & word != "dry")
View(unigram_prob)
unigram_prob <- corp_df %>% text_to_word() %>%
filter(word != "spin" & word != "dry") %>% count(word, sort = TRUE) %>%
mutate(recipeID = corp_df$recipeID, p = n/sum(n)) %>%
reloate(recipeID, .before = first_col())
unigram_prob <- corp_df %>% text_to_word() %>%
filter(word != "spin" & word != "dry") %>% count(word, sort = TRUE) %>%
mutate(recipeID = corp_df$recipeID, p = n/sum(n)) %>%
relocate(recipeID, .before = first_col())
unigram_prob <- corp_df %>% text_to_word() %>%
count(word, sort = TRUE) %>%
filter(word != "spin" & word != "dry") %>%
mutate(recipeID = corp_df$recipeID, p = n/sum(n)) %>%
relocate(recipeID, .before = first_col())
unigram_prob <- corp_df %>% text_to_word() %>%
count(word, sort = TRUE) %>%
mutate(recipeID = corp_df$recipeID)
View(corp_df)
unigram_prob <- corp_df %>% text_to_word()
View(unigram_prob)
unigram_prob <- corp_df %>% text_to_word() %>%
filter(word != "spin" & word != "dry")
View(unigram_prob)
# save recipeID before count() removes
temp <- unique(unigram_prob$recipeID)
View(unigram_prob)
unigram_prob <- unigram_prob %>% count(word, sort = TRUE) %>%
mutate(recipeID = temp, p = n/sum(n))
unigram_prob <- unigram_prob %>% count(word, sort = TRUE)
View(unigram_prob)
unigram <- corp_df %>% text_to_word()
View(unigram)
write.csv(unigram, file.path(xpath_nlp, "unigram.csv"), row.names = FALSE)
getwd()
xpath_main <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_nlp <- file.path(xpath_main, "analysis", "nlp", "_assets")
unigram <- read.csv(file.path(xpath_nlp, "unigram.csv"), header = TRUE, sep = ",")
View(unigram)
library(tidytext)
recipe_tfidf <- unigram %>% bind_tf_idf(word, recipeID, n)
library(dplyr)
recipe_tfidf <- unigram %>% bind_tf_idf(word, recipeID, n)
View(unigram)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = TRUE)
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE)
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n)
View(recipe_tfidf)
library(widyr)
unigram %>% pairwise_count(word, recipeID, sort = TRUE)
test <- unigram %>% pairwise_count(word, recipeID, sort = TRUE)
View(test)
View(unigram)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n)
recipe_idf <- unigram %>% pairwise_count(word, recipeID, sort = TRUE)
View(recipe_idf)
recipe_idf %>% filter(item1 == item2)
test <- unigram %>% pairwise_count(word, recipeID, diag = TRUE, sort = TRUE)
test <- unigram %>% pairwise_count(word, recipeID, diag = TRUE, sort = TRUE) %>%
filter(item1 == item2)
View(test)
rm(test)
recipe_idf <- unigram %>% pairwise_count(word, recipeID, diag = TRUE) %>%
filter(item1 == item2)
View(recipe_idf)
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf, by = "recipeID")
recipe_idf <- unigram %>% pairwise_count(word, recipeID, diag = TRUE) %>%
filter(item1 == item2) %>% select(-item2)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word")
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n)
View(recipe_idf)
length(unique(recipe_tfidf))
length(unique(recipe_tfidf$recipeID))
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = ln(length(unique(.$recipeID)))/idf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n)
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = ln(length(unique(.$recipeID))/idf))
?ln
?log
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(.$recipeID))/idf))
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(.$recipeID))/idf)) %>%
group_by(word) %>% mutate(tf = avg(tf), idf = avg(idf))
?avg
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(.$recipeID))/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf), idf = mean(idf))
View(recipe_tfidf)
recipe_tfidf %>% filter(word == "add")
duplicated(recipe_tfidf$word) %>% head(40)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(.$recipeID))/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf), idf = mean(idf)) %>%
filter(!duplicated(.$word))
which(duplicated(recipe_tfidf$word) == "TRUE")
!duplicated(recipe_tfidf$word)
c("TRUE", "FALSE")
val <- c("TRUE", "FALSE")
test <- recipe_tfidf %>% val
test <- recipe_tfidf %>% filter(val)
val <- c(TRUE, FALSE)
test <- recipe_tfidf %>% filter(val)
test <- recipe_tfidf %>% filter(word == "add")
View(test)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(.$recipeID))/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf), idf = mean(idf)) %>%
filter(!duplicated(word))
View(recipe_tfidf)
unique(recipe_tfidf$word)
unique(recipe_tfidf$word) %>% length()
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(recipeID))/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf), idf = mean(idf)) %>%
filter(!duplicated(word))
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(.$recipeID))/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf), idf = mean(idf)) %>%
filter(!duplicated(word))
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(recipeID))/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf), idf = mean(idf)) %>%
filter(!duplicated(word))
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(.$recipeID))/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf), idf = mean(idf)) %>%
filter(!duplicated(word))
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n)
View(recipe_tfidf)
log(length(unique(recipe_tfidf$recipeID)))
log(length(unique(recipe_tfidf$recipeID))/idf)
length(unique(recipe_tfidf$recipeID))
log(length(unique(recipe_tfidf$recipeID))/2289)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(length(unique(recipeID))/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf), idf = mean(idf)) %>%
filter(!duplicated(word))
View(recipe_tfidf)
View(unigram)
recipe_len <- length(unique(unigram$recipeID))
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(recipe_len/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf), idf = mean(idf)) %>%
filter(!duplicated(word))
View(recipe_tfidf)
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(recipe_len/idf))
View(recipe_tfidf)
recipe_tfidf %>% arrange(word == "add")
recipe_tfidf %>% filter(word == "add")
recipe_idf %>% filter(word == "add")
recipe_idf %>% filter(item1 == "add")
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(recipe_len/idf)) %>%
group_by(word) %>% mutate(tf = mean(tf)) %>%
filter(!duplicated(word))
View(recipe_tfidf)
length(unique(recipe_tfidf$recipeID))
library(ggplot2)
ggplot(recipe_tfidf) +
geom_text(aes(x = tf, y = idf, label = word), color = "blue")
ggplot(recipe_tfidf) +
geom_text(aes(x = idf, y = tf, label = word), color = "blue")
recipe_tfidf %>% filter(word == "octopus")
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(recipe_len/idf)) %>%
group_by(word) %>% mutate(tf = sum(tf)) %>%
filter(!duplicated(word)) %>% mutate(tf = sum(tf)/length(tf))
recipe_tfidf <- unigram %>% group_by(recipeID) %>% count(word, sort = FALSE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(idf = log(recipe_len/idf)) %>%
group_by(word) %>% mutate(tf = sum(tf)) %>%
filter(!duplicated(word)) %>% mutate(tf = tf/length(tf))
View(recipe_tfidf)
recipe_tfidf <- unigram %>% count(word, sort = FALSE)
View(recipe_tfidf)
unigram %>% arrange(-n)
test <- recipe_tfidf %>% arrange(-n)
View(test)
recipe_tfidf <- unigram %>% count(word, sort = TRUE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n)
recipe_tfidf %>% filter(word == "add")
recipe_tfidf <- unigram %>% count(word, sort = TRUE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(tf = tf/length(tf), idf = log(recipe_len/idf))
View(recipe_tfidf)
library(ggplot2)
ggplot(recipe_tfidf) +
geom_text(aes(x = idf, y = tf, label = word), color = "blue")
ggplot(recipe_tfidf) +
geom_text(aes(x = idf, y = tf, label = word), color = "blue") +
coord_cartesian(xlim = c(1,2), ylim = c(0, 0.25))
ggplot(recipe_tfidf) +
geom_text(aes(x = idf, y = tf, label = word), color = "blue")
recipe_tfidf <- unigram %>% count(word, sort = TRUE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(tf = tf/length(tf), idf = log(recipe_len/idf),
tf_idf = tf * idf)
View(recipe_tfidf)
recipe_tfidf <- unigram %>% count(word, sort = TRUE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(tf = tf/length(tf), idf = log(recipe_len/idf), tf_idf = tf * idf) %>%
arrange(-td_idf)
recipe_tfidf <- unigram %>% count(word, sort = TRUE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(tf = tf/length(tf), idf = log(recipe_len/idf), tf_idf = tf * idf) %>%
arrange(-tf_idf)
View(recipe_tfidf)
recipe_tfidf <- unigram %>% count(word, sort = TRUE) %>%
rename(tf = n) %>% left_join(recipe_idf %>% rename(word = item1), by = "word") %>%
rename(idf = n) %>% mutate(tf = tf/recipe_len, idf = log(recipe_len/idf), tf_idf = tf * idf) %>%
arrange(-tf_idf)
View(recipe_tfidf)
library(ggplot2)
ggplot(recipe_tfidf) +
geom_text(aes(x = idf, y = tf, label = word), color = "blue")
# choose first 50 words
goodWords <- recipe_tfidf[[1:50,]]
# choose first 50 words
goodWords <- recipe_tfidf[1:50,]
# choose first 50 words
goodWords <- recipe_tfidf[1:50,]
View(goodWords)
# choose first 100 words
goodWords <- recipe_tfidf[1:100,]
# choose first 100 words
top100 <- recipe_tfidf[1:100,]
write.csv(top100, file.path(xpath_nlp, "top100.csv"))
write.csv(top100, file.path(xpath_nlp, "top100.csv"), row.names = FALSE)
xpath_main <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_nlp <- file.path(xpath_main, "analysis", "nlp", "_assets")
word2d_df <- read.csv(file.path(xpath_nlp, "word2d_df.csv"), header = TRUE, sep = ",")
xpath_main <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_nlp <- file.path(xpath_main, "analysis", "nlp", "_assets")
word2d_df <- read.csv(file.path(xpath_nlp, "word2d_df.csv"), header = TRUE, sep = ",")
top100 <- read.csv(file.path(xpath_nlp, "top100.csv"), header = TRUE, sep = ",")
View(top100)
c(1,2) %in% c(1,2,3)
View(word2d_df)
word2d_100 <- word2d_df %>% filter(word %in% top100)
library(dplyr)
word2d_100 <- word2d_df %>% filter(word %in% top100)
View(word2d_df)
View(word2d_100)
word2d_df %>% filter(word == "fish")
word2d_df %>% filter(word %in% "fish")
View(top100)
word2d_df %>% filter(word %in% c("fish", "orange"))
top100$word
word2d_100 <- word2d_df %>% filter(word %in% top100)
word2d_100 <- word2d_df %>% filter(word %in% top100$word)
View(top100)
library(ggplot2)
ggplot(word2d_100) +
geom_text(aes(x = V1, y = V2, label = word), color = "blue")
ggplot(word2d_100) +
geom_text(aes(x = V1, y = V2, label = word), col = "blue")
ggplot(word2d_100) +
geom_text(aes(x = V1, y = V2, label = word), col = "blue") +
coord_cartesian(ylim = c(-0.05, max(V2)))
ggplot(word2d_100) +
geom_text(aes(x = V1, y = V2, label = word), col = "blue") +
coord_cartesian(ylim = c(-0.05, 0.01))
