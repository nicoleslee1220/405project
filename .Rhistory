library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Taste: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 5600
for(ii in 5600:6000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/tasteWidget.json",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("taste_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
##Connecting to group project DB
library(RMySQL)
library(rjson)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
##Get Recipe Information: creating table in DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "spoonacular")
xtableName <- "spoonacularTaste"
xbool.tableExists <- dbExistsTable(con, xtableName) ; xbool.tableExists
##Connecting to group project DB
library(RMySQL)
library(rjson)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
dbListTables(con)
##Taste: creating table in DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "spoonacular")
xtableName <- "spoonacularTaste"
xbool.tableExists <- dbExistsTable(con, xtableName) ; xbool.tableExists
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName, "  ",
"(DT VARCHAR(15) NOT NULL, ",
"sweetness INT(10), ",
"saltiness INT(10), ",
"sourness INT(10), ",
"bitterness INT(10), ",
"savoriness INT(10), ",
"fattiness INT(10), ",
"spiciness INT(10), ",
"PRIMARY KEY (DT))"
)
xx <- dbGetQuery(con, qstr)
}
xgfn <- list.files(xpath_scrape, pattern="^taste")
xgfn
xgfn_sub <- xgfn
ii <- 1
xthis_fn <- xgfn_sub[1]
xthis_fn
xxx <- strsplit(xthis_fn, "_")[[1]]
xxx
xxx[2]
fromJSON( file=file.path(xpath_scrape, xthis_fn) )
fromJSON( file=file.path(xpath_scrape, xthis_fn) )[1]
fromJSON( file=file.path(xpath_scrape, xthis_fn) )[[1]]
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
xthis_ls["saltiness"]
xthis_ls[["saltiness"]]
xgfn <- list.files(xpath_scrape, pattern="^taste")
xgfn_sub <- xgfn
ii <- 1
for(ii in 1:length(xgfn_sub)) {
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
sweetness <- xthis_ls[[c("sweetness")]]
saltiness <- xthis_ls[[c("saltiness")]]
sourness <- xthis_ls[[c("sourness")]]
bitterness <- xthis_ls[[c("bitterness")]]
savoriness <- xthis_ls[[c("savoriness")]]
fattiness <- xthis_ls[[c("fattiness")]]
spiciness <- xthis_ls[[c("spiciness")]]
qstr <- paste0(
"INSERT INTO ", xtableName, " (DT, sweetness, saltiness, sourness, bitterness, savoriness, fattiness,
spiciness) ",
" VALUES ",
"('",
DT, "', '",
as.integer(sweetness), "', '",
as.integer(saltiness), "', '",
as.integer(sourness), "', '",
as.integer(bitterness), "', '",
as.integer(savoriness), "', '",
as.integer(fattiness), "', '",
as.integer(spiciness), "')"
)
xx <- try(dbGetQuery(con, qstr), silent=TRUE)
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Team Table failed for recipe# ", DT, "\n")
} else {
cat("Successfully inserted recipe# ", DT, "into Table", "\n")
}
}
xAPIkey
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 5600
for(ii in 5600:13000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 6000
for(ii in 6000:13000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 6000
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 6000
for(ii in 6000:7000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 6783
for(ii in 6783:7000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 6783
for(ii in 6783:7000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 7001
for(ii in 7001:8000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 7600
for(ii in 7600:8000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 8001
for(ii in 8001:9000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 9001
for(ii in 9001:10000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 10001
for(ii in 10001:11000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
##Connecting to group project DB
library(RMySQL)
library(rjson)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 10843
for(ii in 10843:11000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 11001
for(ii in 11001:12000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
