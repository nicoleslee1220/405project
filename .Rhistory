"INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, vegan, glutenFree, dairyFree, veryHealthy,
cheap, veryPopular, sustainable, lowFodmap, weightWatcherSmartPoints, gaps, preparationMinutes,
cookingMinutes, aggregateLikes, healthScore, sourceName, pricePerServing) ",
# "INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, pricePerServing) ",
" VALUES ",
"('",
DT, "', '",
as.integer(recipeID), "', '",
vegetarian, "', '",
vegan, "', '",
glutenFree, "', '",
dairyFree, "', '",
veryHealthy, "', '",
cheap, "', '",
veryPopular, "', '",
sustainable, "', '",
lowFodmap, "', '",
as.integer(weightWatcherSmartPoints), "', '",
gaps, "', '",
as.integer(preparationMinutes), "', '",
as.integer(cookingMinutes), "', '",
as.integer(aggregateLikes), "', '",
as.integer(healthScore), "', '",
sourceName,"', '",
as.integer(pricePerServing), "')"
)
xx <- try(dbGetQuery(con, qstr), silent=TRUE)
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Team Table failed for recipe# ", DT, "\n")
} else {
cat("Successfully inserted recipe# ", DT, "into Table", "\n")
}
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_main_data
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
(!dir.exists(xpath_scrape)
dir.exists(xpath_scrape)
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
xAPIkey
## Taste: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 11047
for(ii in 11047:12000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/tasteWidget.json",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("taste_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Taste: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 12001
for(ii in 12001:13000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/tasteWidget.json",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("taste_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
library(RMySQL)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
dbListTables(con)
xx <- dbGetQuery(con, paste0("SELECT * FROM ", xtableName))
xtableName <- "spoonacularTaste"
xx <- dbGetQuery(con, paste0("SELECT * FROM ", xtableName))
xtableName <- "spoonacularRecipe"
xx <- dbGetQuery(con, paste0("SELECT * FROM ", xtableName))
xx
##Connecting to group project DB
library(RMySQL)
library(rjson)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
dbListTables(con)
xgfn <- list.files(xpath_scrape, pattern="^taste")
##Taste: creating table in DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "spoonacular")
xtableName <- "spoonacularTaste"
xbool.tableExists <- dbExistsTable(con, xtableName) ; xbool.tableExists
xgfn <- list.files(xpath_scrape, pattern="^taste")
xgfn_sub <- xgfn
xgfn
xpath_scrape
xpath_scrape <- file.path(xpath_main_data, "/spoonacularTaste")
xtableName <- "spoonacularTaste"
xgfn <- list.files(xpath_scrape, pattern="^taste")
xgfn
xpath_scrape <- file.path(xpath_main_data, "/spoonacular_taste")
xtableName <- "spoonacularTaste"
xgfn <- list.files(xpath_scrape, pattern="^taste")
xgfn_sub <- xgfn
xgfn
ii <- 1
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
xthis_ls[[c("readyInMinutes")]]
xxx
xthis_ls[[c("readyInMinutes")]]
xthis_ls[[c("title")]]
xthis_ls[[c("id")]]
xthis_ls[[c("vegetarian")]]
xthis_ls
##Get Recipe Information: Inserting json data into DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "/spoonacular_Recipe")
xtableName <- "spoonacularRecipe"
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xgfn_sub <- xgfn
Recxgfn
xgfn
ii <- 1
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
recipeID
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
xthis_ls[[c("readyInMinutes")]]
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "/spoonacular_Recipe")
xtableName <- "spoonacularRecipe"
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xgfn_sub <- xgfn
ii <- 1
for(ii in 1:length(xgfn_sub)) {
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
xthis_ls[[c("readyInMinutes")]]
qstr <- paste0(
"INSERT INTO ", xtableName, " (DT, readyInMinutes) ",
# "INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, pricePerServing) ",
" VALUES ",
"('",
DT, "', '",
as.integer(readyInMinutes), "')"
)
xx <- try(dbGetQuery(con, qstr), silent=TRUE)
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Team Table failed for recipe# ", DT, "\n")
} else {
cat("Successfully inserted recipe# ", DT, "into Table", "\n")
}
}
##Get Recipe Information: Inserting json data into DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "/spoonacular_Recipe")
xtableName <- "spoonacularRecipe"
xgfn <- list.files(xpath_scrape, pattern="^recipe")
##Get Recipe Information: Adding readyInMinutes column from json into DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "/spoonacular_Recipe")
xtableName <- "spoonacularRecipe"
####adding column
qstr <- paste0("ALTER TABLE ", xtableName , "ADD readyInMinutes INT(7)")
xx <- dbGetQuery(con, qstr)
qstr
####adding column
qstr <- paste0("ALTER TABLE ", xtableName , " ADD readyInMinutes INT(7)")
xx <- dbGetQuery(con, qstr)
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xgfn_sub <- xgfn
ii <- 1
for(ii in 1:length(xgfn_sub)) {
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
vegetarian <- xthis_ls[[c("vegetarian")]]
vegan <- xthis_ls[[c("vegan")]]
glutenFree <- xthis_ls[[c("glutenFree")]]
dairyFree <- xthis_ls[[c("dairyFree")]]
veryHealthy <- xthis_ls[[c("veryHealthy")]]
cheap <- xthis_ls[[c("cheap")]]
veryPopular <- xthis_ls[[c("veryPopular")]]
sustainable <- xthis_ls[[c("sustainable")]]
lowFodmap <- xthis_ls[[c("lowFodmap")]]
weightWatcherSmartPoints <- xthis_ls[[c("weightWatcherSmartPoints")]]
gaps <- xthis_ls[[c("gaps")]]
preparationMinutes <- xthis_ls[[c("preparationMinutes")]]
veryHealthy <- xthis_ls[[c("veryHealthy")]]
cookingMinutes <- xthis_ls[[c("cookingMinutes")]]
aggregateLikes <- xthis_ls[[c("aggregateLikes")]]
healthScore <- xthis_ls[[c("healthScore")]]
sourceName <- xthis_ls[[c("sourceName")]]
pricePerServing <- xthis_ls[[c("pricePerServing")]]
qstr <- paste0(
"INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, vegan, glutenFree, dairyFree, veryHealthy,
cheap, veryPopular, sustainable, lowFodmap, weightWatcherSmartPoints, gaps, preparationMinutes,
cookingMinutes, aggregateLikes, healthScore, sourceName, pricePerServing) ",
# "INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, pricePerServing) ",
" VALUES ",
"('",
DT, "', '",
as.integer(recipeID), "', '",
vegetarian, "', '",
vegan, "', '",
glutenFree, "', '",
dairyFree, "', '",
veryHealthy, "', '",
cheap, "', '",
veryPopular, "', '",
sustainable, "', '",
lowFodmap, "', '",
as.integer(weightWatcherSmartPoints), "', '",
gaps, "', '",
as.integer(preparationMinutes), "', '",
as.integer(cookingMinutes), "', '",
as.integer(aggregateLikes), "', '",
as.integer(healthScore), "', '",
sourceName,"', '",
as.integer(pricePerServing), "')"
)
xx <- try(dbGetQuery(con, qstr), silent=TRUE)
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Team Table failed for recipe# ", DT, "\n")
} else {
cat("Successfully inserted recipe# ", DT, "into Table", "\n")
}
}
ii <- 1
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
##Get Recipe Information: Adding readyInMinutes column from json into DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "/spoonacular_Recipe")
xtableName <- "spoonacularRecipe"
####adding column
qstr <- paste0("ALTER TABLE ", xtableName , " ADD readyInMinutes INT(7)")
xx <- dbGetQuery(con, qstr)
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xgfn_sub <- xgfn
xgfn
ii <- 1
for(ii in 1:length(xgfn_sub)) {
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
xthis_ls[[c("readyInMinutes")]]
qstr <- paste0(
"INSERT INTO ", xtableName, " (DT, readyInMinutes) ",
# "INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, pricePerServing) ",
" VALUES ",
"('",
DT, "', '",
as.integer(readyInMinutes), "')"
)
xx <- try(dbGetQuery(con, qstr), silent=TRUE)
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Team Table failed for recipe# ", DT, "\n")
} else {
cat("Successfully inserted recipe# ", DT, "into Table", "\n")
}
}
qstr
ii <- 1
for(ii in 1:length(xgfn_sub)) {
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
readyInMinutes <- xthis_ls[[c("readyInMinutes")]]
qstr <- paste0(
"INSERT INTO ", xtableName, " (DT, readyInMinutes) ",
# "INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, pricePerServing) ",
" VALUES ",
"('",
DT, "', '",
as.integer(readyInMinutes), "')"
)
xx <- try(dbGetQuery(con, qstr), silent=TRUE)
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Team Table failed for recipe# ", DT, "\n")
} else {
cat("Successfully inserted recipe# ", DT, "into Table", "\n")
}
}
ii <- 1
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
readyInMinutes <- xthis_ls[[c("readyInMinutes")]]
qstr <- paste0(
"INSERT INTO ", xtableName, " (DT, readyInMinutes) ",
# "INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, pricePerServing) ",
" VALUES ",
"('",
DT, "', '",
as.integer(readyInMinutes), "')"
)
qstr
qstr <- paste0(
"UPDATE ", xtableName, " SET readyInMinutes=", readyInMinutes, " WHERE DT=" DT
)
qstr <- paste0(
"UPDATE ", xtableName, " SET readyInMinutes=", readyInMinutes, " WHERE DT=", DT
)
qstr
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xgfn_sub <- xgfn
ii <- 1
for(ii in 1:length(xgfn_sub)) {
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
readyInMinutes <- xthis_ls[[c("readyInMinutes")]]
qstr <- paste0(
"UPDATE ", xtableName, " SET readyInMinutes=", readyInMinutes, " WHERE DT=", DT
)
xx <- try(dbGetQuery(con, qstr), silent=TRUE)
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Team Table failed for recipe# ", DT, "\n")
} else {
cat("Successfully inserted recipe# ", DT, "into Table", "\n")
}
}
library(RMySQL)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
dbListTables(con)
# Getting recipe table
recipe<-dbGetQuery(con, "SELECT * FROM spoonacular_clean")
dim(recipe)
library(RMySQL)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
dbListTables(con)
##########################################################################################################
# acquire tables
recipe <- dbGetQuery(con, "SELECT * FROM spoonacularRecipe")
taste <- dbGetQuery(con, "SELECT * FROM spoonacularTaste")
instruct <- dbGetQuery(con, "SELECT * FROM spoonacularInstruct")
#### DATA WRANGLING ####
library(tidyverse)
# combine into one df
recipe <- recipe %>% inner_join(taste, by = "DT") %>% inner_join(instruct, by = "DT") %>%
select(-c(14,15)) %>% mutate(spiciness = c("none", "medium", "high")[findInterval(spiciness, c(0, 380051, 67500000), rightmost.closed = TRUE)])
dim(recipe)
##########################################################################################################
# acquire tables
recipe <- dbGetQuery(con, "SELECT * FROM spoonacularRecipe")
taste <- dbGetQuery(con, "SELECT * FROM spoonacularTaste")
instruct <- dbGetQuery(con, "SELECT * FROM spoonacularInstruct")
library(dplyr)
instruct <- instruct %>% filter(instructions != "")
#### DATA WRANGLING ####
library(tidyverse)
# combine into one df
recipe <- recipe %>% inner_join(taste, by = "DT") %>% inner_join(instruct, by = "DT") %>%
select(-c(14,15)) %>% mutate(spiciness = c("none", "medium", "high")[findInterval(spiciness, c(0, 380051, 67500000), rightmost.closed = TRUE)])
dim(recipe)
#Unrestricted
##Pasta w/ meat: checking for pasta + bacon, pasta + chicken, pasta + shrimp, pasta + fish, pasta + beef, pasta + meat
combination1<- grepl("pasta", recipe$instructions,ignore.case = TRUE) & grepl("chicken", recipe$instructions,ignore.case = TRUE)
combination2<- grepl("pasta", recipe$instructions,ignore.case = TRUE) & grepl("beef", recipe$instructions,ignore.case = TRUE)
combination3<- grepl("pasta", recipe$instructions,ignore.case = TRUE) & grepl("shrimp", recipe$instructions,ignore.case = TRUE)
combination4<- grepl("pasta", recipe$instructions,ignore.case = TRUE) & grepl("fish", recipe$instructions,ignore.case = TRUE)
combination5<- grepl("pasta", recipe$instructions,ignore.case = TRUE) & grepl("meat", recipe$instructions,ignore.case = TRUE)
combination6<- grepl("pasta", recipe$instructions,ignore.case = TRUE) & grepl("bacon", recipe$instructions,ignore.case = TRUE)
pastaWMeat<- combination1 | combination2 | combination3 | combination4 | combination5 | combination6
##Crumb-Crusted: checking for egg + coat
combination1 <- grepl("egg", recipe$instructions,ignore.case = TRUE) & grepl("coat", recipe$instructions,ignore.case = TRUE)
crumbCrusted <- combination1
##Saucy: checking for simmer
combination1 <- grepl("simmer", recipe$instructions,ignore.case = TRUE)
saucy <- combination1
##Cake: checking for cake
combination1 <- grepl("cake", recipe$instructions,ignore.case = TRUE)
cake <- combination1
##Unrestricted_dataframe
unrestricted_df<- data.frame(pastaWMeat, crumbCrusted, saucy, cake)
##Tossed Salad: checking for toss + salad
combination_2<-grepl("toss", recipe$instructions,ignore.case = TRUE) & grepl("salad", recipe$instructions,ignore.case = TRUE)
tossedSalad <- combination_2
##GlutenFree_dataframe
glutenFree_df<- data.frame(tossedSalad)
#Dairy Free
##Roasted: check for oven + golden
roasted <- grepl("oven",recipe$instructions,ignore.case = TRUE) & grepl("golden",recipe$instructions,ignore.case = TRUE)
##Bake: checking for dough, cheese + oven
combination1<- grepl("dough", recipe$instructions,ignore.case = TRUE)
combination2<- grepl("cheese", recipe$instructions,ignore.case = TRUE) & grepl("oven", recipe$instructions,ignore.case = TRUE)
bake <- combination1 | combination2
##DairyFree_dataframe
dairyFree_df<- data.frame(bake, roasted)
##Roasted Vegetables: checking for golden + oven + vegetable, golden + oven + broccoli
combination1 <- grepl("golden", recipe$instructions,ignore.case = TRUE) & grepl("oven", recipe$instructions,ignore.case = TRUE) & grepl("vegetable", recipe$instructions,ignore.case = TRUE)
combination2<- grepl("golden", recipe$instructions,ignore.case = TRUE) & grepl("oven", recipe$instructions,ignore.case = TRUE) & grepl("broccoli", recipe$instructions,ignore.case = TRUE)
roastedVegetables <- combination1 | combination2
##Tossed salad no meat: checking for toss + salad + !chicken + !shrimp + !bacon + !meat + !beef
combination1 <- grepl("toss", recipe$instructions,ignore.case = TRUE) & grepl("salad", recipe$instructions,ignore.case = TRUE) & !grepl("chicken", recipe$instructions,ignore.case = TRUE) & !grepl("shrimp", recipe$instructions,ignore.case = TRUE) & !grepl("bacon", recipe$instructions,ignore.case = TRUE) & !grepl("meat", recipe$instructions,ignore.case = TRUE) & !grepl("beef", recipe$instructions,ignore.case = TRUE)
tossedSaladNoMeat <- combination1
##Pasta no meat: checking for pasta + !chicken + !shrimp + !bacon + !meat + !beef
combination1 <- grepl("pasta", recipe$instructions,ignore.case = TRUE) & !grepl("chicken", recipe$instructions,ignore.case = TRUE) & !grepl("shrimp", recipe$instructions,ignore.case = TRUE) & !grepl("bacon", recipe$instructions,ignore.case = TRUE) & !grepl("meat", recipe$instructions,ignore.case = TRUE) & !grepl("beef", recipe$instructions,ignore.case = TRUE)
pastaNoMeat <- combination1
##Vegan_dataframe
vegan_df<- data.frame(roastedVegetables, tossedSaladNoMeat, pastaNoMeat)
#all dataframe combined
totalDf <- data.frame(unrestricted_df, glutenFree_df, dairyFree_df, vegan_df)
totalDf
#combine with healthscore
recipe2$healthScore
##########################################################################################################
#TEMPORARY ADD
# acquire tables
recipe2 <- dbGetQuery(con, "SELECT * FROM spoonacularRecipe")
#combine with healthscore
recipe2$healthScore
#combine with healthscore
healthScore <- recipe2$healthScore
#all dataframe combined
allDiets <- data.frame(unrestricted_df, glutenFree_df, dairyFree_df, vegan_df)
#combine with healthscore
healthScore <- recipe2$healthScore
totalDf <- data.frame(healthScore, allDiets)
#combine with healthscore
healthScore <- recipe$healthScore
totalDf <- data.frame(healthScore, allDiets)
totalDf
#linear regression
model1 <- lm(healthScore ~ unrestricted_df, glutenFree_df, dairyFree_df, vegan_df)
#linear regression
model1 <- lm(healthScore ~ unrestricted_df, glutenFree_df, dairyFree_df, vegan_df, data = totalDf)
unrestricted_df
glutenFree_df
#linear regression
model1 <- lm(healthScore ~ pastaWMeat,crumbCrusted, saucy, cake, tossedSalad, bake, roasted, roastedVegetables, tossedSaladNoMeat, pastaNoMeat, data = totalDf)
head(totalDf)
#linear regression
model1 <- lm(healthScore ~ ., data = totalDf)
model1
