library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 6783
for(ii in 6783:7000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 7001
for(ii in 7001:8000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 7600
for(ii in 7600:8000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 8001
for(ii in 8001:9000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 9001
for(ii in 9001:10000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 10001
for(ii in 10001:11000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
##Connecting to group project DB
library(RMySQL)
library(rjson)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 10843
for(ii in 10843:11000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 11001
for(ii in 11001:12000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Get Recipe Information: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 12001
for(ii in 12001:13000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
##Connecting to group project DB
library(RMySQL)
library(rjson)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
dbListTables(con)
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xhfn
xgfn
xgfn_sub <- xgfn
ii <- 1
for(ii in 1:length(xgfn_sub)) {
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
vegetarian <- xthis_ls[[c("vegetarian")]]
vegan <- xthis_ls[[c("vegan")]]
glutenFree <- xthis_ls[[c("glutenFree")]]
dairyFree <- xthis_ls[[c("dairyFree")]]
veryHealthy <- xthis_ls[[c("veryHealthy")]]
cheap <- xthis_ls[[c("cheap")]]
veryPopular <- xthis_ls[[c("veryPopular")]]
sustainable <- xthis_ls[[c("sustainable")]]
lowFodmap <- xthis_ls[[c("lowFodmap")]]
weightWatcherSmartPoints <- xthis_ls[[c("weightWatcherSmartPoints")]]
gaps <- xthis_ls[[c("gaps")]]
preparationMinutes <- xthis_ls[[c("preparationMinutes")]]
veryHealthy <- xthis_ls[[c("veryHealthy")]]
cookingMinutes <- xthis_ls[[c("cookingMinutes")]]
aggregateLikes <- xthis_ls[[c("aggregateLikes")]]
healthScore <- xthis_ls[[c("healthScore")]]
sourceName <- xthis_ls[[c("sourceName")]]
pricePerServing <- xthis_ls[[c("pricePerServing")]]
qstr <- paste0(
"INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, vegan, glutenFree, dairyFree, veryHealthy,
cheap, veryPopular, sustainable, lowFodmap, weightWatcherSmartPoints, gaps, preparationMinutes,
cookingMinutes, aggregateLikes, healthScore, sourceName, pricePerServing) ",
# "INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, pricePerServing) ",
" VALUES ",
"('",
DT, "', '",
as.integer(recipeID), "', '",
vegetarian, "', '",
vegan, "', '",
glutenFree, "', '",
dairyFree, "', '",
veryHealthy, "', '",
cheap, "', '",
veryPopular, "', '",
sustainable, "', '",
lowFodmap, "', '",
as.integer(weightWatcherSmartPoints), "', '",
gaps, "', '",
as.integer(preparationMinutes), "', '",
as.integer(cookingMinutes), "', '",
as.integer(aggregateLikes), "', '",
as.integer(healthScore), "', '",
sourceName,"', '",
as.integer(pricePerServing), "')"
)
xx <- try(dbGetQuery(con, qstr), silent=TRUE)
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Team Table failed for recipe# ", DT, "\n")
} else {
cat("Successfully inserted recipe# ", DT, "into Table", "\n")
}
}
##Get Recipe Information: creating table in DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "spoonacular")
xtableName <- "spoonacularRecipe"
xbool.tableExists <- dbExistsTable(con, xtableName) ; xbool.tableExists
dbListTables(con)
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xgfn_sub <- xgfn
ii <- 1
for(ii in 1:length(xgfn_sub)) {
xthis_fn <- xgfn_sub[ii]
xxx <- strsplit(xthis_fn, "_")[[1]]
DT <- xxx[2] #DT is the recipe number
recipeID <- xxx[2]
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
vegetarian <- xthis_ls[[c("vegetarian")]]
vegan <- xthis_ls[[c("vegan")]]
glutenFree <- xthis_ls[[c("glutenFree")]]
dairyFree <- xthis_ls[[c("dairyFree")]]
veryHealthy <- xthis_ls[[c("veryHealthy")]]
cheap <- xthis_ls[[c("cheap")]]
veryPopular <- xthis_ls[[c("veryPopular")]]
sustainable <- xthis_ls[[c("sustainable")]]
lowFodmap <- xthis_ls[[c("lowFodmap")]]
weightWatcherSmartPoints <- xthis_ls[[c("weightWatcherSmartPoints")]]
gaps <- xthis_ls[[c("gaps")]]
preparationMinutes <- xthis_ls[[c("preparationMinutes")]]
veryHealthy <- xthis_ls[[c("veryHealthy")]]
cookingMinutes <- xthis_ls[[c("cookingMinutes")]]
aggregateLikes <- xthis_ls[[c("aggregateLikes")]]
healthScore <- xthis_ls[[c("healthScore")]]
sourceName <- xthis_ls[[c("sourceName")]]
pricePerServing <- xthis_ls[[c("pricePerServing")]]
qstr <- paste0(
"INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, vegan, glutenFree, dairyFree, veryHealthy,
cheap, veryPopular, sustainable, lowFodmap, weightWatcherSmartPoints, gaps, preparationMinutes,
cookingMinutes, aggregateLikes, healthScore, sourceName, pricePerServing) ",
# "INSERT INTO ", xtableName, " (DT, recipeID, vegetarian, pricePerServing) ",
" VALUES ",
"('",
DT, "', '",
as.integer(recipeID), "', '",
vegetarian, "', '",
vegan, "', '",
glutenFree, "', '",
dairyFree, "', '",
veryHealthy, "', '",
cheap, "', '",
veryPopular, "', '",
sustainable, "', '",
lowFodmap, "', '",
as.integer(weightWatcherSmartPoints), "', '",
gaps, "', '",
as.integer(preparationMinutes), "', '",
as.integer(cookingMinutes), "', '",
as.integer(aggregateLikes), "', '",
as.integer(healthScore), "', '",
sourceName,"', '",
as.integer(pricePerServing), "')"
)
xx <- try(dbGetQuery(con, qstr), silent=TRUE)
if( "try-error" %in% class(xx) ) {
cat("SQL insert into Team Table failed for recipe# ", DT, "\n")
} else {
cat("Successfully inserted recipe# ", DT, "into Table", "\n")
}
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_main_data
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
(!dir.exists(xpath_scrape)
dir.exists(xpath_scrape)
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
xAPIkey
## Taste: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 11047
for(ii in 11047:12000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/tasteWidget.json",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("taste_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Taste: Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 12001
for(ii in 12001:13000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/tasteWidget.json",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("taste_", ii, "_spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
library(RMySQL)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
dbListTables(con)
xx <- dbGetQuery(con, paste0("SELECT * FROM ", xtableName))
xtableName <- "spoonacularTaste"
xx <- dbGetQuery(con, paste0("SELECT * FROM ", xtableName))
xtableName <- "spoonacularRecipe"
xx <- dbGetQuery(con, paste0("SELECT * FROM ", xtableName))
xx
