xthis_url
xthisJSON <- try(readLines(con=xthis_url))
xthisJSON
class(xthisJSON)
try(readLines(con=xthis_url, silent = TRUE))
try(readLines(con=xthis_url, silence = TRUE))
try(readLines(con=xthis_url, silence = TRUE))
try(readLines(con=xthis_url)
)
try(readLines(con=xthis_url))
try(readLines(con=xthis_url), silent = TRUE)
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 5600
for(ii in 5600:5700) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(readLines(con=xthis_url, silent = TRUE))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe", ii, "__spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
xthis_url<- https://api.spoonacular.com/recipes/5603/information?apiKey=1b67e2895014428e887d9ad423e74056
xthis_url<- "https://api.spoonacular.com/recipes/5603/information?apiKey=1b67e2895014428e887d9ad423e74056"
xthisJSON <- try(readLines(con=xthis_url))
if("try-error" %in% class(xthisJSON)){}
if("try-error" %in% class(xthisJSON)){ cat("try-error for recipe 5603")}
class(xthisJSON)
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 5600
for(ii in 5600:5700) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(readLines(con=xthis_url))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe", ii, "__spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
## Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 5600
for(ii in 5600:5700) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe", ii, "__spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(RMySQL)
library(rjson)
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_USER")
xpw     <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PW")
xdbname <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_MY_DB_ADMIN_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_MY_DB_ADMIN_PORT") )
con <-
dbConnect(
drv,
user=xdbuser,
password=xpw,
dbname=xdbname,
host=xdbhost,
port=xdbport,
unix.sock=xdbsock
)
dbListTables(con)
##Connecting to group project DB
library(RMySQL)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
dbListTables(con)
xtableName <- "spoonacularRecipe"
xbool.tableExists <- dbExistsTable(con, xtableName) ; xbool.tableExists
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Spoonacular has about 1.7 million recipes, downloading a subset
set.seed(999)
sample(c(1:1700000), 100, replace = FALSE)
sample(c(1:1700000), 150, replace = FALSE)
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Spoonacular has about 1.7 million recipes, downloading a subset
set.seed(999)
n <- 150 #downloading subset of 150
sampleList <- sample(c(1:1700000), n, replace = FALSE)
ii <- 1
for(ii in 1:n) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
sampleList[ii],
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", sampleList[ii], "\n")
}else{
xtn_out <- paste0("recipe", sampleList[ii], "__spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", sampleList[ii], "\n" )
}
Sys.sleep(1)
}
## Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 5600
for(ii in 5600:6000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe", ii, "__spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
options(width=90, xtable.comment = FALSE)
library(SSsimple)
library(rjson)
## Setting directory for .json downlad. xpath_scrape is where .json will download into
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <-
file.path(
xpath_main_data,
"spoonacular"
)
if(!dir.exists(xpath_scrape)) {
dir.create(xpath_scrape, recursive=TRUE)
}
## Add xAPI_KEY to .Renviron
xAPIkey <- Sys.getenv("MY_SPOONACULAR_APIKEY")
xAPIkey
## Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 5600
for(ii in 5600:6000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe", ii, "__spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
##creating table in DB and inserting json data into DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape_games <- file.path(xpath_main_data, "spoonacular")
xpath_scrape_games
## Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 5600
xpath_scrape <- file.path(xpath_main_data, "spoonacular")
## Spoonacular has about 1.7 million recipes, downloading a subset
ii <- 5900
for(ii in 5900:6000) {
xthis_url <-
paste0(
"https://api.spoonacular.com/recipes/",
ii,
"/information",
"?apiKey=",
xAPIkey
)
xthisJSON <- try(suppressWarnings(readLines(con=xthis_url)))
if("try-error" %in% class(xthisJSON)){
cat("Could not read recipe", ii, "\n")
}else{
xtn_out <- paste0("recipe", ii, "__spoonacular.json")
writeLines( xthisJSON, file.path(xpath_scrape, xtn_out) )
cat("Done getting recipe", ii, "\n" )
}
Sys.sleep(1)
}
##Connecting to group project DB
library(RMySQL)
drv <- dbDriver("MySQL")
xdbsock <- ""
xdbuser <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_USER")
xpw     <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PW")
xdbname <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_DBNAME")
xdbhost <- Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_HOST")
xdbport <- as.integer( Sys.getenv("MAS405_AWS_PROJ_DB_ROUSER_PORT") )
con <- dbConnect(drv, user=xdbuser, password=xpw, dbname=xdbname, host=xdbhost, port=xdbport, unix.sock=xdbsock)
dbGetInfo(con)
dbListTables(con)
##creating table in DB
xpath_main_data <- Sys.getenv("PATH_MY_MAIN_DATA")
xpath_scrape <- file.path(xpath_main_data, "spoonacular")
xtableName <- "spoonacularRecipe"
xbool.tableExists <- dbExistsTable(con, xtableName) ; xbool.tableExists
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName, "  ",
"recipeID INT(10)",
"vegetarian VARCHAR(5), ",
"vegan VARCHAR(5), ",
"glutenFree VARCHAR(5), ",
"dairyFree VARCHAR(5), ",
"veryHealthy VARCHAR(5), ",
"cheap VARCHAR(5), ",
"veryPopular VARCHAR(5), ",
"sustainable VARCHAR(5), ",
"lowFodmap, VARCHAR(5), ",
"weightWatcherSmartPoints, INT(7), ",
"gaps VARCHAR(5), ",
"preparationMinutes INT(7), ",
"cookingMinutes INT(7), ",
"aggregateLikes INT(7), ",
"healthScore  INT(7), ",
"sourceName VARCHAR(10)" ,
"pricePerServing DECIMAL(10, 2)"
)
xx <- dbGetQuery(con, qstr)
}
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName, "  ",
"(DT VARCHAR(15) NOT NULL, ",
"recipeID INT(10)",
"vegetarian VARCHAR(5), ",
"vegan VARCHAR(5), ",
"glutenFree VARCHAR(5), ",
"dairyFree VARCHAR(5), ",
"veryHealthy VARCHAR(5), ",
"cheap VARCHAR(5), ",
"veryPopular VARCHAR(5), ",
"sustainable VARCHAR(5), ",
"lowFodmap, VARCHAR(5), ",
"weightWatcherSmartPoints, INT(7), ",
"gaps VARCHAR(5), ",
"preparationMinutes INT(7), ",
"cookingMinutes INT(7), ",
"aggregateLikes INT(7), ",
"healthScore  INT(7), ",
"sourceName VARCHAR(10)" ,
"pricePerServing DECIMAL(10, 2)",
"PRIMARY KEY (DT))"
)
xx <- dbGetQuery(con, qstr)
}
xtableName <- "spoonacularRecipe"
xbool.tableExists <- dbExistsTable(con, xtableName) ; xbool.tableExists
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName, "  ",
"(DT VARCHAR(15) NOT NULL, ",
"recipeID INT(10)",
"vegetarian VARCHAR(5), ",
"vegan VARCHAR(5), ",
"glutenFree VARCHAR(5), ",
"dairyFree VARCHAR(5), ",
"veryHealthy VARCHAR(5), ",
"cheap VARCHAR(5), ",
"veryPopular VARCHAR(5), ",
"sustainable VARCHAR(5), ",
"lowFodmap, VARCHAR(5), ",
"weightWatcherSmartPoints, INT(7), ",
"gaps VARCHAR(5), ",
"preparationMinutes INT(7), ",
"cookingMinutes INT(7), ",
"aggregateLikes INT(7), ",
"healthScore  INT(7), ",
"sourceName VARCHAR(10)" ,
"pricePerServing DECIMAL(10, 2)",
"PRIMARY KEY (DT))"
)
xx <- dbGetQuery(con, qstr)
}
l
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName, "  ",
"(DT VARCHAR(15) NOT NULL, ",
"recipeID INT(10), ",
"vegetarian VARCHAR(5), ",
"vegan VARCHAR(5), ",
"glutenFree VARCHAR(5), ",
"dairyFree VARCHAR(5), ",
"veryHealthy VARCHAR(5), ",
"cheap VARCHAR(5), ",
"veryPopular VARCHAR(5), ",
"sustainable VARCHAR(5), ",
"lowFodmap, VARCHAR(5), ",
"weightWatcherSmartPoints, INT(7), ",
"gaps VARCHAR(5), ",
"preparationMinutes INT(7), ",
"cookingMinutes INT(7), ",
"aggregateLikes INT(7), ",
"healthScore  INT(7), ",
"sourceName VARCHAR(10)" ,
"pricePerServing DECIMAL(10, 2)",
"PRIMARY KEY (DT))"
)
xx <- dbGetQuery(con, qstr)
}
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName, "  ",
"(DT VARCHAR(15) NOT NULL, ",
"recipeID INT(10), ",
"vegetarian VARCHAR(5), ",
"vegan VARCHAR(5), ",
"glutenFree VARCHAR(5), ",
"dairyFree VARCHAR(5), ",
"veryHealthy VARCHAR(5), ",
"cheap VARCHAR(5), ",
"veryPopular VARCHAR(5), ",
"sustainable VARCHAR(5), ",
"lowFodmap VARCHAR(5), ",
"weightWatcherSmartPoints INT(7), ",
"gaps VARCHAR(5), ",
"preparationMinutes INT(7), ",
"cookingMinutes INT(7), ",
"aggregateLikes INT(7), ",
"healthScore  INT(7), ",
"sourceName VARCHAR(10)" ,
"pricePerServing DECIMAL(10, 2)",
"PRIMARY KEY (DT))"
)
xx <- dbGetQuery(con, qstr)
}
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName, "  ",
"(DT VARCHAR(15) NOT NULL, ",
"recipeID INT(10), ",
"vegetarian VARCHAR(5), ",
"vegan VARCHAR(5), ",
"glutenFree VARCHAR(5), ",
"dairyFree VARCHAR(5), ",
"veryHealthy VARCHAR(5), ",
"cheap VARCHAR(5), ",
"veryPopular VARCHAR(5), ",
"sustainable VARCHAR(5), ",
"lowFodmap VARCHAR(5), ",
"weightWatcherSmartPoints INT(7), ",
"gaps VARCHAR(5), ",
"preparationMinutes INT(7), ",
"cookingMinutes INT(7), ",
"aggregateLikes INT(7), ",
"healthScore  INT(7), ",
"sourceName VARCHAR(10), ",
"pricePerServing DECIMAL(10, 2)",
"PRIMARY KEY (DT))"
)
xx <- dbGetQuery(con, qstr)
}
if(!xbool.tableExists) {
qstr <-
paste0(
"CREATE TABLE ", xtableName, "  ",
"(DT VARCHAR(15) NOT NULL, ",
"recipeID INT(10), ",
"vegetarian VARCHAR(5), ",
"vegan VARCHAR(5), ",
"glutenFree VARCHAR(5), ",
"dairyFree VARCHAR(5), ",
"veryHealthy VARCHAR(5), ",
"cheap VARCHAR(5), ",
"veryPopular VARCHAR(5), ",
"sustainable VARCHAR(5), ",
"lowFodmap VARCHAR(5), ",
"weightWatcherSmartPoints INT(7), ",
"gaps VARCHAR(5), ",
"preparationMinutes INT(7), ",
"cookingMinutes INT(7), ",
"aggregateLikes INT(7), ",
"healthScore  INT(7), ",
"sourceName VARCHAR(10), ",
"pricePerServing DECIMAL(10, 2), ",
"PRIMARY KEY (DT))"
)
xx <- dbGetQuery(con, qstr)
}
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xgfn
xgfn_sub[1]
xthis_fn <- xgfn_sub[1]
xthis_fn
xgfn <- list.files(xpath_scrape, pattern="^recipe")
xgfn_sub <- xgfn
xthis_fn <- xgfn_sub[1]
xthis_fn
xthis_ls <- fromJSON( file=file.path(xpath_scrape, xthis_fn) )
xthis_ls
